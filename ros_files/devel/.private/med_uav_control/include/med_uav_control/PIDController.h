// Generated by gencpp from file med_uav_control/PIDController.msg
// DO NOT EDIT!


#ifndef MED_UAV_CONTROL_MESSAGE_PIDCONTROLLER_H
#define MED_UAV_CONTROL_MESSAGE_PIDCONTROLLER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace med_uav_control
{
template <class ContainerAllocator>
struct PIDController_
{
  typedef PIDController_<ContainerAllocator> Type;

  PIDController_()
    : header()
    , ref(0.0)
    , meas(0.0)
    , P(0.0)
    , I(0.0)
    , D(0.0)
    , U(0.0)  {
    }
  PIDController_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ref(0.0)
    , meas(0.0)
    , P(0.0)
    , I(0.0)
    , D(0.0)
    , U(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _ref_type;
  _ref_type ref;

   typedef float _meas_type;
  _meas_type meas;

   typedef float _P_type;
  _P_type P;

   typedef float _I_type;
  _I_type I;

   typedef float _D_type;
  _D_type D;

   typedef float _U_type;
  _U_type U;





  typedef boost::shared_ptr< ::med_uav_control::PIDController_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::med_uav_control::PIDController_<ContainerAllocator> const> ConstPtr;

}; // struct PIDController_

typedef ::med_uav_control::PIDController_<std::allocator<void> > PIDController;

typedef boost::shared_ptr< ::med_uav_control::PIDController > PIDControllerPtr;
typedef boost::shared_ptr< ::med_uav_control::PIDController const> PIDControllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::med_uav_control::PIDController_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::med_uav_control::PIDController_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::med_uav_control::PIDController_<ContainerAllocator1> & lhs, const ::med_uav_control::PIDController_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ref == rhs.ref &&
    lhs.meas == rhs.meas &&
    lhs.P == rhs.P &&
    lhs.I == rhs.I &&
    lhs.D == rhs.D &&
    lhs.U == rhs.U;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::med_uav_control::PIDController_<ContainerAllocator1> & lhs, const ::med_uav_control::PIDController_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace med_uav_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::med_uav_control::PIDController_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::med_uav_control::PIDController_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::med_uav_control::PIDController_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::med_uav_control::PIDController_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::med_uav_control::PIDController_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::med_uav_control::PIDController_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::med_uav_control::PIDController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40c7eb50c8af809a4f7f350f7833a17f";
  }

  static const char* value(const ::med_uav_control::PIDController_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40c7eb50c8af809aULL;
  static const uint64_t static_value2 = 0x4f7f350f7833a17fULL;
};

template<class ContainerAllocator>
struct DataType< ::med_uav_control::PIDController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "med_uav_control/PIDController";
  }

  static const char* value(const ::med_uav_control::PIDController_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::med_uav_control::PIDController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float32 ref     # referent control value\n"
"float32 meas    # measured control value\n"
"float32 P       # proportional component\n"
"float32 I       # integral component\n"
"float32 D       # derivative component\n"
"float32 U       # sum of three components\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::med_uav_control::PIDController_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::med_uav_control::PIDController_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ref);
      stream.next(m.meas);
      stream.next(m.P);
      stream.next(m.I);
      stream.next(m.D);
      stream.next(m.U);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PIDController_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::med_uav_control::PIDController_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::med_uav_control::PIDController_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ref: ";
    Printer<float>::stream(s, indent + "  ", v.ref);
    s << indent << "meas: ";
    Printer<float>::stream(s, indent + "  ", v.meas);
    s << indent << "P: ";
    Printer<float>::stream(s, indent + "  ", v.P);
    s << indent << "I: ";
    Printer<float>::stream(s, indent + "  ", v.I);
    s << indent << "D: ";
    Printer<float>::stream(s, indent + "  ", v.D);
    s << indent << "U: ";
    Printer<float>::stream(s, indent + "  ", v.U);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MED_UAV_CONTROL_MESSAGE_PIDCONTROLLER_H
